{"version":3,"sources":["components/Counter.js","components/PhoneForm.js","components/PhoneInfo.js","components/PhoneInfoList.js","components/CartItem.js","components/Cart.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","increamentCount","setState","count","state","increasementSize","decreamentCount","addCartItem","callbackFromParent","id","product","productName","name","size","error","prevProps","prevState","console","log","snapshot","info","react_default","a","createElement","missing","Container","maxWidth","AppBar","position","color","Typography","variant","Toolbar","Button","onClick","Component","PhoneForm","phone","handleChange","e","defineProperty","target","value","handleSubmit","preventDefault","onCreate","onSubmit","placeholder","onChange","type","PhoneInfo","_this$props$info","style","border","padding","margin","PhoneInfoList","list","data","map","components_PhoneInfo","key","defaultProps","CartItem","_this$props$item","item","Cart","cartList","components_CartItem","productInfo","App","information","handleCreate","concat","objectSpread","itemCounterCallBack","className","components_PhoneForm","components_PhoneInfoList","components_Counter","components_Cart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TAgHeA,cAnGX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWVQ,gBAAkB,WAEdP,EAAKQ,SAAS,CACVC,MAAOT,EAAKU,MAAMD,MAAQT,EAAKU,MAAMC,oBAf1BX,EAmBnBY,gBAAkB,WACVZ,EAAKU,MAAMD,OAAST,EAAKU,MAAMC,kBACnCX,EAAKQ,SAAS,CACVC,MAAOT,EAAKU,MAAMD,MAAQT,EAAKU,MAAMC,oBAtB1BX,EAoDnBa,YAAc,WAEVb,EAAKD,MAAMe,mBAAmBd,EAAKU,QApDnCV,EAAKU,MAAQ,CACTK,GAAIf,EAAKD,MAAMiB,QAAQD,GACvBE,YAAajB,EAAKD,MAAMiB,QAAQE,KAChCP,iBAAkBX,EAAKD,MAAMiB,QAAQG,KACrCV,MAAOT,EAAKD,MAAMiB,QAAQP,MAC1BW,OAAO,GAPIpB,uFA0BKqB,EAAWC,GAC/B,GAAIA,EAAUb,QAAUN,KAAKO,MAAMD,MAG/B,OAFAc,QAAQC,IAAI,oBAEL,CACHf,MAAMa,EAAUb,kDAMTY,EAAWC,EAAWG,GACjCA,GACAF,QAAQC,IAAI,+CAAkBC,EAAShB,iDAI7BW,EAAOM,GACrBH,QAAQC,IAAIJ,GACZG,QAAQC,IAAIE,GAEZvB,KAAKK,SAAS,CACVY,OAAO,qCAWX,OAAIjB,KAAKO,MAAMU,MAEPO,EAAAC,EAAAC,cAAA,6EAIJF,EAAAC,EAAAC,cAAA,WACK1B,KAAKJ,MAAM+B,QACZH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,SAAS,MAApB,qBAEIL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAC5BR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAYC,QAAQ,KAAKF,MAAM,WAC3BR,EAAAC,EAAAC,cAACS,EAAA,EAAD,wBACWnC,KAAKO,MAAMK,GADtB,IAC2BZ,KAAKO,MAAMO,YAClCU,EAAAC,EAAAC,cAAA,WAFJ,kBAGU1B,KAAKO,MAAMD,MACrBkB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACIF,QAAQ,YACRF,MAAM,UACNK,QAASrC,KAAKI,iBAHlB,KAKAoB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQF,QAAQ,YAAYF,MAAM,UAC9BK,QAASrC,KAAKS,iBADlB,KAGAe,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQF,QAAQ,YAAYF,MAAM,UAC9BK,QAASrC,KAAKU,aADlB,wCAzFN4B,qBCyCPC,6MA7CXhC,MAAQ,CACJQ,KAAM,GACNyB,MAAO,MAGXC,aAAe,SAACC,GACZ7C,EAAKQ,SAALP,OAAA6C,EAAA,EAAA7C,CAAA,GACK4C,EAAEE,OAAO7B,KAAO2B,EAAEE,OAAOC,WAIlCC,aAAe,SAACJ,GACZA,EAAEK,iBACFlD,EAAKD,MAAMoD,SAASnD,EAAKU,OACzBV,EAAKQ,SAAS,CACZU,KAAM,GACNyB,MAAO,8EAKT,OACIhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMuB,SAAUjD,KAAK8C,cACrBtB,EAAAC,EAAAC,cAAA,SACIwB,YAAY,yBACZnC,KAAK,OACLoC,SAAUnD,KAAKyC,aACfI,MAAO7C,KAAKO,MAAMQ,OACtBS,EAAAC,EAAAC,cAAA,SACIwB,YAAY,gCACZnC,KAAK,QACLoC,SAAUnD,KAAKyC,aACfI,MAAO7C,KAAKO,MAAMiC,QACtBhB,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,UAAQ0B,KAAK,UAAb,0BAtCQd,aCmBTe,mLAlBJ,IAAAC,EACqBtD,KAAKJ,MAAM2B,KAA/BR,EADDuC,EACCvC,KAAMyB,EADPc,EACOd,MADPc,EACc1C,GAQrB,OACEY,EAAAC,EAAAC,cAAA,OAAK6B,MAPO,CACZC,OAAQ,kBACRC,QAAS,MACTC,OAAQ,QAKNlC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAIX,IACTS,EAAAC,EAAAC,cAAA,WAAMc,WAbUF,aCClBqB,mLAKK,IAGDC,EAFW5D,KAAKJ,MAAdiE,KAEUC,IAChB,SAAAvC,GAAI,OAAKC,EAAAC,EAAAC,cAACqC,EAAD,CAAWxC,KAAMA,EAAMyC,IAAKzC,EAAKX,OAE5C,OACEY,EAAAC,EAAAC,cAAA,WACGkC,UAbmBtB,aAAtBqB,EACGM,aAAe,CACpBJ,KAAM,IAiBKF,QCAAO,mLAbF,IAAAC,EAC8BnE,KAAKJ,MAAMwE,KAAtCxD,EADHuD,EACGvD,GAAIE,EADPqD,EACOrD,YAAaR,EADpB6D,EACoB7D,MAEzB,OACIkB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,6CACSd,EADT,yBACoBE,EADpB,+BACyCR,WAZlCgC,aCCjB+B,mLAMO,IAGCC,EAFUtE,KAAKJ,MAAbiE,KAEcC,IAClB,SAAAM,GAAI,OAAK5C,EAAAC,EAAAC,cAAC6C,EAAD,CAAUH,KAAMA,EAAMJ,IAAKI,EAAKxD,OAE7C,OACIY,EAAAC,EAAAC,cAAA,WACK4C,UAdEhC,aAAb+B,EAEKJ,aAAe,CAClBJ,KAAM,IAiBCQ,QCjBXG,EAAc,CAChB5D,GAAI,MACJG,KAAM,iCACNT,MAAO,GACPU,KAAM,IAmDOyD,6MA/CblE,MAAQ,CACNmE,YAAa,GACbJ,SAAU,MAGZK,aAAe,SAACd,GACdzC,QAAQC,IAAIwC,GADW,IAEfa,EAAgB7E,EAAKU,MAArBmE,YACR7E,EAAKQ,SAAS,CACZqE,YAAaA,EAAYE,OAAZ9E,OAAA+E,EAAA,EAAA/E,CAAA,GACR+D,EADQ,CAEXjD,GAAIf,EAAKe,aAKfkE,oBAAsB,SAACV,GAAS,IACtBE,EAAazE,EAAKU,MAAlB+D,SACRlD,QAAQC,IAAI,sBACZD,QAAQC,IAAI+C,GACZvE,EAAKQ,SAAS,CACZiE,SAAUA,EAASM,OAAT9E,OAAA+E,EAAA,EAAA/E,CAAA,GACLsE,+EAOP,OACE5C,EAAAC,EAAAC,cAAA,OAAKqD,UAAU,OACbvD,EAAAC,EAAAC,cAACsD,EAAD,CAAWhC,SAAUhD,KAAK2E,eAC1BnD,EAAAC,EAAAC,cAACuD,EAAD,CAAepB,KAAM7D,KAAKO,MAAMmE,cAEhClD,EAAAC,EAAAC,cAACwD,EAAD,CAASvE,mBAAoBX,KAAK8E,oBAAqBjE,QAAS2D,IAEhEhD,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,4BAEEF,EAAAC,EAAAC,cAACyD,EAAD,CAAMtB,KAAM7D,KAAKO,MAAM+D,oBAzCfhC,aCFE8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.22382116.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nclass Counter extends Component {\n    static propTypes = {\n        product: PropTypes.object\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.product.id,\n            productName: this.props.product.name,\n            increasementSize: this.props.product.size,\n            count: this.props.product.count,\n            error: false\n        };\n    }\n\n\n    increamentCount = () => {\n        //console.log(this.state.incrementSize);\n        this.setState({\n            count: this.state.count + this.state.increasementSize\n        })\n    }\n\n    decreamentCount = () => {\n        if (this.state.count <= this.state.increasementSize) return;\n        this.setState({\n            count: this.state.count - this.state.increasementSize\n        })\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        if (prevState.count !== this.state.count) {\n            console.log('snapshot changed');\n\n            return {\n                count:prevState.count,\n            };\n        }\n\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (snapshot) {\n            console.log('value 값이 바뀌었다!', snapshot.count);\n        }\n    }\n\n    componentDidCatch(error, info) {\n        console.log(error);\n        console.log(info);\n\n        this.setState({\n            error: true,\n        })\n    }\n\n    addCartItem = () => {\n        //console.log(this.state);\n        this.props.callbackFromParent(this.state);\n        //console.log('sent state');\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <div>에러가 발생하였습니다.</div>\n            )\n        }\n        return (\n            <div>\n                {this.props.missing}\n                <Container maxWidth=\"sm\">\n                    카운터\n                    <AppBar position=\"static\" color=\"default\">\n                        <Typography variant=\"h6\" color=\"inherit\">\n                            <Toolbar>\n                                상품 : [{this.state.id}]{this.state.productName}\n                                <br/>\n                                수량 : {this.state.count}\n                            <Button \n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={this.increamentCount}>+\n                            </Button>\n                            <Button variant=\"contained\" color=\"primary\" \n                                onClick={this.decreamentCount}>-\n                            </Button>\n                            <br/>\n                            <Button variant=\"contained\" color=\"primary\"\n                                onClick={this.addCartItem}>\n                                카트추가\n                            </Button>\n                            </Toolbar>\n                        </Typography>\n                    </AppBar>\n\n                </Container>\n            </div>\n        );\n    }\n}\n\n\nexport default Counter;","import React, { Component } from 'react';\n\nclass PhoneForm extends Component {\n\n    state = {\n        name: \"\",\n        phone: \"\",\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.onCreate(this.state);\n        this.setState({\n          name: '',\n          phone: '',\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                <input \n                    placeholder=\"please enter your name\"\n                    name=\"name\"\n                    onChange={this.handleChange}\n                    value={this.state.name} />\n                <input\n                    placeholder=\"plese enter your phone number\"\n                    name=\"phone\"\n                    onChange={this.handleChange}\n                    value={this.state.phone} />\n                <div>\n\n                <button type=\"submit\">등록</button>\n                {/* <div>{this.state.name} {this.state.phone}</div> */}\n                </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default PhoneForm;","import React, { Component } from 'react';\n\nclass PhoneInfo extends Component {\n  render() {\n    const { name, phone, id } = this.props.info;\n\n    const style = {\n      border: '1px solid black',\n      padding: '8px',\n      margin: '8px',\n    };\n\n    return (\n      <div style={style}>\n        <div><b>{name}</b></div>\n        <div>{phone}</div>\n      </div>\n    );\n  }\n}\n\nexport default PhoneInfo;","import React, { Component } from 'react';\nimport PhoneInfo from './PhoneInfo';\n\nclass PhoneInfoList extends Component {\n  static defaultProps = {\n    data: []\n  }\n\n  render() {\n    const { data } = this.props;\n\n    const list = data.map(\n      info => (<PhoneInfo info={info} key={info.id} />)\n    );\n    return (\n      <div>\n        {list}  \n      </div>\n    );\n  }\n}\n\nexport default PhoneInfoList;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass CartItem extends Component {\n\n    static propTypes = {\n        item: PropTypes.object\n    }\n\n    render() {\n        const { id, productName, count } = this.props.item;\n\n        return (\n            <div>\n                <p>\n                상품아이디 : {id} 상품명 : {productName} 주문수량 : {count}\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default CartItem;","import React, { Component } from 'react';\nimport CartItem from './CartItem';\n\n\nclass Cart extends Component {\n\n    static defaultProps = {\n        data: []\n    }\n\n    render() {\n        const { data} = this.props;\n\n        const cartList = data.map(\n            item => (<CartItem item={item} key={item.id} />)\n        );\n        return (\n            <div>\n                {cartList}\n            </div>\n        );\n    }\n}\n\nexport default Cart;","import React, { Component } from 'react';\nimport './App.css';\nimport Counter from './components/Counter';\nimport PhoneForm from './components/PhoneForm';\nimport PhoneInfoList from './components/PhoneInfoList';\nimport Cart from './components/Cart';\n\nvar productInfo = {\n  id: \"999\",\n  name: \"게살볶음밥\",\n  count: 20,\n  size: 10\n};\n\nclass App extends Component {\n  state = {\n    information: [],\n    cartList: [],\n  }\n  \n  handleCreate = (data) => {\n    console.log(data);\n    const { information } = this.state;\n    this.setState({\n      information: information.concat({\n        ...data,\n        id: this.id++,\n      })\n    });\n  }\n\n  itemCounterCallBack = (item) => {\n    const { cartList } = this.state;\n    console.log('recevied item data');\n    console.log(item);\n    this.setState({\n      cartList: cartList.concat({\n        ...item,\n      })\n    });\n    //console.log(this.state);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <PhoneForm onCreate={this.handleCreate} />\n        <PhoneInfoList data={this.state.information}/>\n        {/* {JSON.STRINGIFY(THIS.STATE.INFORMATION)} */}\n        <Counter callbackFromParent={this.itemCounterCallBack} product={productInfo} />\n\n        <br/>\n\n        <div>\n          Cart Item List\n          <Cart data={this.state.cartList} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}